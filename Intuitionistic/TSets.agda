----------------------------------------------
-- Time-indexed sets and modalities on them --
----------------------------------------------

open import Function

open import Data.Empty
open import Data.Nat
open import Data.Nat.Properties
open import Data.Product renaming (map to mapหฃ)
open import Data.Sum renaming (map to mapโบ)
open import Data.Unit hiding (_โค_)

import Relation.Binary.PropositionalEquality as Eq
open Eq
open Eq.โก-Reasoning

open import Language

module TSets where

-- Auxiliary lemmas

nโธmโธkโกnโธm+k : (n m k : โ) โ n โธ m โธ k โก n โธ (m + k)
nโธmโธkโกnโธm+k zero    zero    k       = refl
nโธmโธkโกnโธm+k zero    (suc m) zero    = refl
nโธmโธkโกnโธm+k zero    (suc m) (suc k) = refl
nโธmโธkโกnโธm+k (suc n) zero    k       = refl
nโธmโธkโกnโธm+k (suc n) (suc m) k       = nโธmโธkโกnโธm+k n m k

nโคkโmโคkโธnโn+mโคk : (n m k : โ) โ n โค k โ m โค k โธ n โ n + m โค k
nโคkโmโคkโธnโn+mโคk zero m k zโคn q = q
nโคkโmโคkโธnโn+mโคk (suc n) m (suc k) (sโคs p) q =
  +-monoสณ-โค 1 (nโคkโmโคkโธnโn+mโคk n m k p q)

nโคmโmโธn+nโคm : (n m : โ) โ n โค m โ m โธ n + n โค m
nโคmโmโธn+nโคm zero m zโคn =
  โค-reflexive (+-identityสณ m)
nโคmโmโธn+nโคm (suc n) (suc m) (sโคs p) =
  โค-trans
    (โค-reflexive (+-suc (m โธ n) n))
    (+-monoสณ-โค 1 (nโคmโmโธn+nโคm n m p))

n+mโคkโmโคkโธn : (n m k : โ) โ n + m โค k โ m โค k โธ n
n+mโคkโmโคkโธn zero    m       k       p       = p
n+mโคkโmโคkโธn (suc n) zero    k       p       = zโคn
n+mโคkโmโคkโธn (suc n) (suc m) (suc k) (sโคs p) = n+mโคkโmโคkโธn n (suc m) k p

nโกm+kโคn' : โ {n n' m k} โ n โก m + k โ n โค n' โ ฮฃ[ m' โ โ ] (n' โก m' + k ร m โค m')
nโกm+kโคn' {n' = n'} {m = m} p zโคn
  rewrite m+nโก0โmโก0 m (sym p) | m+nโก0โnโก0 m (sym p) =
    n' , sym (+-identityสณ n') , zโคn
nโกm+kโคn' {n' = .(suc _)} {m = zero} refl (sโคs {n''} {n'''} q) with nโกm+kโคn' {k = n''} refl q
... | p' , q' , r' = p' , trans (cong suc q') (sym (+-suc p' n'')) , r'
nโกm+kโคn' {n' = .(suc _)} {m = suc m} p (sโคs {n''} {n'''} q) with suc-injective p
... | s with nโกm+kโคn' {m = m} s q
... | p' , q' , r' = suc p' , cong suc q' , +-mono-โค (โค-refl {1}) r'

-- Time-indexed sets (covariant presheaves indexed by `(โ,โค)`)

record TSet : Setโ where
  constructor
    tset
  field
    carrier  : Time โ Set
    monotone : โ {t t'} โ t โค t' โ carrier t โ carrier t'

    -- TODO: also include the functor laws for refl-id and trans-โ

open TSet public

-- Maps of time-indexed sets

record _โแต_ (A B : TSet) : Set where
  constructor
    tset-map
  field
    map-carrier : โ {t} โ carrier A t โ carrier B t

    -- TODO: also include naturality law

infix 20 _โแต_

open _โแต_ public

-- Identity and composition of maps of time-indexed sets

idแต : โ {A} โ A โแต A
idแต = tset-map id

_โแต_ : โ {A B C} โ B โแต C โ A โแต B โ A โแต C
(tset-map g) โแต (tset-map f) = tset-map (g โ f)

infixr 9 _โแต_

-- Product, sum, exponent, etc structures of time-indexed sets

---- terminal object

๐แต : TSet
๐แต = tset (ฮป _ โ โค) (ฮป _ โ id)

terminalแต : โ {A} โ A โแต ๐แต
terminalแต = tset-map (ฮป _ โ tt)

---- initial object

๐แต : TSet
๐แต = tset (ฮป _ โ โฅ) (ฮป _ โ id)

initialแต : โ {A} โ ๐แต โแต A
initialแต = tset-map (ฮป ())

---- products

_รแต_ : TSet โ TSet โ TSet
(tset A Af) รแต (tset B Bf) =
  tset
    (ฮป t โ A t ร B t)
    (ฮป p โ mapหฃ (Af p) (Bf p))

infixr 23 _รแต_

fstแต : โ {A B} โ A รแต B โแต A
fstแต = tset-map projโ

sndแต : โ {A B} โ A รแต B โแต B
sndแต = tset-map projโ

โจ_,_โฉแต : โ {A B C} โ A โแต B โ A โแต C โ A โแต B รแต C
โจ tset-map f , tset-map g โฉแต = tset-map < f , g >

mapหฃแต : โ {A B C D} โ A โแต C โ B โแต D โ A รแต B โแต C รแต D
mapหฃแต (tset-map f) (tset-map g) = tset-map (mapหฃ f g)

---- exponentials

_โแต_ : TSet โ TSet โ TSet
(tset A Af) โแต (tset B Bf) =
  tset
    (ฮป t โ {t' : Time} โ t โค t' โ A t' โ B t')
    (ฮป p f q a โ f (โค-trans p q) a)

infix 22 _โแต_

appแต : โ {A B} โ (A โแต B) รแต A โแต B
appแต = tset-map ฮป { {t} (f , a) โ f โค-refl a }

curryแต : โ {A B C} โ A รแต B โแต C โ A โแต B โแต C
curryแต {tset A Af} (tset-map f) = tset-map (ฮป a โ ฮป p b โ f (Af p a , b))

uncurryแต : โ {A B C} โ A โแต B โแต C โ A รแต B โแต C
uncurryแต (tset-map f) = tset-map ฮป { (a , b) โ f a โค-refl b }

