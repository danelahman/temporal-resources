--------------------------------------------------------
-- Interpretation of well-typed terms in time-indexed --
--------------------------------------------------------

open import Function

open import Data.Nat
open import Data.Nat.Properties
open import Data.Product

import Relation.Binary.PropositionalEquality as Eq
open Eq hiding ([_])
open Eq.≡-Reasoning

open import Language
open import TSets

module Interpretation where

-- Base types are interpreted as constant presheaves

postulate
  BaseSet : BaseType → Set

BaseTSet : BaseType → TSet
BaseTSet B = tset (λ _ → BaseSet B) (λ _ → id)

-- Interpretation of ground types

⟦_⟧ᵍ : GType → TSet
⟦ Base B ⟧ᵍ = BaseTSet B
⟦ Unit ⟧ᵍ   = 𝟙ᵗ
⟦ Empty ⟧ᵍ  = 𝟘ᵗ

-- Free graded monad generated by algebraic operations

data Tˢ (A : TSet) : (τ : Time) → (t : Time) → Set where  -- 1st time index (τ) is the duration of the computation (monad's grading)
                                                          -- 2nd time index (t) is the corresponding TSet time-index (modal time)
  leaf : ∀ {τ t}
       → TSet.carrier A (τ + t)
       → Tˢ A τ t

  node : ∀ {τ τ' t}
       → (op : Op)
       → TSet.carrier ⟦ param op ⟧ᵍ t
       → ((t' : Time) → t ≤ t' → TSet.carrier (⟨ op-time op ⟩ᵒ ⟦ arity op ⟧ᵍ) t' → Tˢ A τ t')
       → τ' ≡ op-time op + τ
       → Tˢ A τ' t

Tˢ-≤t : ∀ {A τ t t'} → t ≤ t' → Tˢ A τ t → Tˢ A τ t'
Tˢ-≤t {(tset A Af)} p (leaf a) =
  leaf (Af (+-mono-≤ ≤-refl p) a)
Tˢ-≤t {(tset A Af)} p (node op v k q) =
  node
    op (TSet.monotone ⟦ param op ⟧ᵍ p v)
    (λ t' q y → Tˢ-≤t ≤-refl (k t' (≤-trans p q) y)) q

Tˢ-≤τ : ∀ {A τ τ' t} → τ ≤ τ' → Tˢ A τ t → Tˢ A τ' t
Tˢ-≤τ {(tset A Af)} p (leaf v) = leaf (Af (+-mono-≤ p ≤-refl) v)
Tˢ-≤τ {(tset A Af)} p (node op v k q) =
  node
    op v
    (λ t' r y → Tˢ-≤τ (proj₂ (proj₂ (≤-split-+ q p (no-stutter op)))) (k t' r y))
    (proj₁ (proj₂ (≤-split-+ q p (no-stutter op))))

Tˢᶠ : ∀ {A B τ} → A →ᵗ B → {t : Time} → Tˢ A τ t → Tˢ B τ t
Tˢᶠ (tset-map f) (leaf a)   =
  leaf (f a)
Tˢᶠ (tset-map f) (node op v k q) =
  node op v (λ t' p y → Tˢᶠ (tset-map f) (k t' p y)) q

Tᵒ : TSet → Time → TSet
Tᵒ A τ = tset (λ t → Tˢ A τ t) Tˢ-≤t

-- Interpretation of types

mutual

  ⟦_⟧ᵛ : VType → TSet
  ⟦ Base B ⟧ᵛ  = BaseTSet B
  ⟦ Unit ⟧ᵛ    = 𝟙ᵗ
  ⟦ Empty ⟧ᵛ   = 𝟘ᵗ
  ⟦ A ⇒ C ⟧ᵛ   = ⟦ A ⟧ᵛ ⇒ᵗ ⟦ C ⟧ᶜ
  ⟦ [ τ ] A ⟧ᵛ = [ τ ]ᵒ ⟦ A ⟧ᵛ

  ⟦_⟧ᶜ : CType → TSet
  ⟦ A ‼ τ ⟧ᶜ = Tᵒ ⟦ A ⟧ᵛ τ

  infix 25 ⟦_⟧ᵛ
  infix 25 ⟦_⟧ᶜ
