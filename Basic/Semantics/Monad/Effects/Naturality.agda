---------------------------------------------------------
-- Free graded monad generated by algebraic operations --
---------------------------------------------------------

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.TSets
open import Semantics.Modality.Future
open import Semantics.Modality.Past
open import Semantics.Monad.Core
open import Semantics.Monad.Effects

open import Util.Equality
open import Util.Operations
open import Util.Time

module Semantics.Monad.Effects.Naturality where

-- The (algebraic) operations of the monad generated by the operations in Op (continued)
----------------------------------------------------------------------------------------

-- Naturality of the delay operation

delayᵀ-nat : ∀ {A B} (τ : Time) {τ'}
           → (f : A →ᵗ B)
           →  delayᵀ τ {τ' = τ'} ∘ᵗ [ τ ]ᶠ (Tᶠ f)
           ≡ᵗ Tᶠ f ∘ᵗ delayᵀ τ
delayᵀ-nat τ f =
  eqᵗ (λ c →
    trans
      (∘ᵗ-reveal _ _ _)
      (trans
        (cong (delay τ) ([]-reveal _ _ _))
        (sym (∘ᵗ-reveal _ _ _))))


-- Naturality of the (other) algebraic operations

opᵀ-nat : ∀ {A B τ} → (op : Op)
        → (f : A →ᵗ B)
        →  opᵀ {τ = τ} op ∘ᵗ mapˣᵗ idᵗ ([ op-time op ]ᶠ (map⇒ᵗ idᵗ (Tᶠ f)))
        ≡ᵗ Tᶠ f ∘ᵗ opᵀ op
opᵀ-nat {A} {B} {τ} op f =
  eqᵗ (λ {t} c →
    trans
      (∘ᵗ-reveal _ _ _)
      (trans
        (dcong₃ (node op)
          (trans
            (cong (λ xy → proj₁ (unpack-×ᵗ {⟦ param op ⟧ᵍ} {[ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ B τ)} xy))
              (⟨⟩ᵗ-reveal _ _ _))
            (trans
              (cong proj₁ (pack-unpack-×ᵗ {⟦ param op ⟧ᵍ} {[ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ B τ)} _))
              (trans
                (∘ᵗ-reveal _ _ _)
                (trans
                  (idᵗ-reveal _)
                  (fstᵗ-reveal _)))))
          (trans
            (subst-const ({t' : Time} → t + op-time op ≤ t' → carrier ⟦ arity op ⟧ᵍ t' → Tˢ B τ t')
              (trans
                (cong (λ xy → proj₁ (unpack-×ᵗ xy))
                  (⟨⟩ᵗ-reveal
                    (idᵗ ∘ᵗ fstᵗ)
                    ([ op-time op ]ᶠ (map⇒ᵗ idᵗ (Tᶠ f)) ∘ᵗ sndᵗ)
                    c))
              (trans
                (cong proj₁
                  (pack-unpack-×ᵗ
                  (map-carrier (idᵗ ∘ᵗ fstᵗ) c ,
                    map-carrier ([ op-time op ]ᶠ (map⇒ᵗ idᵗ (Tᶠ f)) ∘ᵗ sndᵗ) c)))
                (trans (∘ᵗ-reveal idᵗ fstᵗ c)
                  (trans (idᵗ-reveal (map-carrier fstᵗ c)) (fstᵗ-reveal c))))) _)
            (ifun-ext (fun-ext (λ p → fun-ext (λ y →
              trans
                (cong (λ (g : homᵒ (t + op-time op) ×ᵗ ⟦ arity op ⟧ᵍ →ᵗ Tᵒ B τ) →
                        map-carrier g (pack-×ᵗ {homᵒ (t + op-time op)} {⟦ arity op ⟧ᵍ} (pack-homᵒ (t + op-time op) p , y)))
                  (trans
                    (cong
                      (λ xy → unpack-⇒ᵗ (proj₂ (unpack-×ᵗ {⟦ param op ⟧ᵍ} {[ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ B τ)} xy)))
                      (⟨⟩ᵗ-reveal _ _ _))
                    (trans
                      (cong (λ xy → unpack-⇒ᵗ (proj₂ xy))
                        (pack-unpack-×ᵗ {⟦ param op ⟧ᵍ} {[ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ B τ)} _))
                      (trans
                        (cong unpack-⇒ᵗ (∘ᵗ-reveal _ _ _))
                        (trans
                          (cong unpack-⇒ᵗ ([]-reveal _ _ _))
                          (trans
                            (cong unpack-⇒ᵗ (map⇒ᵗ-reveal _ _ _))
                            (pack-unpack-⇒ᵗ _)))))))
                (trans
                  (∘ᵗ-reveal _ _ _)
                  (cong (Tˢᶠ f)
                    (cong
                      (λ (g : homᵒ (t + op-time op) ×ᵗ ⟦ arity op ⟧ᵍ →ᵗ Tᵒ A τ) →
                        map-carrier g (pack-×ᵗ {homᵒ (t + op-time op)} {⟦ arity op ⟧ᵍ} (pack-homᵒ (t + op-time op) p , y)))
                      {unpack-⇒ᵗ (map-carrier sndᵗ c) ∘ᵗ mapˣᵗ idᵗ idᵗ}
                      {unpack-⇒ᵗ (proj₂ (unpack-×ᵗ c))}
                      (trans
                        (≡ᵗ-≡
                          (∘ᵗ-congʳ
                            (≡ᵗ-sym
                              (⟨⟩ᵗ-unique _ _ idᵗ
                                (≡ᵗ-trans
                                  (∘ᵗ-identityʳ _)
                                  (≡ᵗ-sym (∘ᵗ-identityˡ _)))
                                (≡ᵗ-trans
                                  (∘ᵗ-identityʳ _)
                                  (≡ᵗ-sym (∘ᵗ-identityˡ _)))))))
                        (trans
                          (≡ᵗ-≡ (∘ᵗ-identityʳ _))
                          (cong (unpack-⇒ᵗ) (sndᵗ-reveal _))))))))))))
          (ifun-ext (ifun-ext (fun-ext (λ p → fun-ext (λ q → fun-ext (λ y → uip)))))))
        (sym (∘ᵗ-reveal _ _ _))))

