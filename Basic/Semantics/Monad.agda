---------------------------------------------------------
-- Free graded monad generated by algebraic operations --
---------------------------------------------------------

-- Note: A version of the monad that is not quotioned by
--       the delay equations (identity and composition)

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.TSets

open import Semantics.Modality.Future
open import Semantics.Modality.Past

open import Semantics.Monad.Core renaming (⟦_⟧ᵍ to ⟦_⟧ᵍ'; Tᵒ to Tᵒ'; Tᶠ to Tᶠ'; ηᵀ to ηᵀ'; μᵀ to μᵀ')
open import Semantics.Monad.Strength renaming (strᵀ to strᵀ')
open import Semantics.Monad.Effects renaming (delayᵀ to delayᵀ'; opᵀ to opᵀ'; T-alg-of-handlerᵀ to T-alg-of-handlerᵀ')

open import Util.HProp
open import Util.Equality
open import Util.Operations
open import Util.Time

module Semantics.Monad where

-- The free graded monad generated by the operations in Op
----------------------------------------------------------

-- Interpretation of ground types
---------------------------------

⟦_⟧ᵍ : GType → TSet
⟦_⟧ᵍ = ⟦_⟧ᵍ'


-- Abstractly (re-)exposing the top-level monad structure, operations, and laws

---- Monad structure

abstract

  Tᵒ : TSet → Time → TSet
  Tᵒ = Tᵒ'
 
  Tᶠ : ∀ {A B τ} → A →ᵗ B → Tᵒ A τ →ᵗ Tᵒ B τ
  Tᶠ = Tᶠ'

  ηᵀ : ∀ {A} → A →ᵗ Tᵒ A 0
  ηᵀ = ηᵀ'

  μᵀ : ∀ {A τ τ'} → Tᵒ (Tᵒ A τ') τ →ᵗ Tᵒ A (τ + τ')
  μᵀ = μᵀ'


---- Strength

abstract

  strᵀ : ∀ {A B τ τ'} → [ τ ]ᵒ (⟨ τ' ⟩ᵒ A) ×ᵗ Tᵒ B τ →ᵗ Tᵒ (⟨ τ' ⟩ᵒ A ×ᵗ B) τ
  strᵀ {A} {B} {τ} {τ'} = strᵀ' {A} {B} {τ} {τ'}


---- Effects (operations and handling)

abstract

  delayᵀ : ∀ {A} (τ : Time) {τ'} → [ τ ]ᵒ (Tᵒ A τ') →ᵗ Tᵒ A (τ + τ')
  delayᵀ = delayᵀ'

  opᵀ : ∀ {A τ} → (op : Op)
      → ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ) →ᵗ Tᵒ A (op-time op + τ)
  opᵀ = opᵀ'

  T-alg-of-handlerᵀ : ∀ {A τ τ'}
                    → Π Op (λ op → Π Time (λ τ'' →
                       ⟦ param op ⟧ᵍ ×ᵗ ([ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ (Tᵒ A τ'')))
                         ⇒ᵗ Tᵒ A (op-time op + τ'')))
                    →ᵗ Tᵒ (Tᵒ A τ') τ ⇒ᵗ Tᵒ A (τ + τ')
  T-alg-of-handlerᵀ = T-alg-of-handlerᵀ'

