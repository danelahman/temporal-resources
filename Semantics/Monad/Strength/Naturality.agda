---------------------------------------------------------
-- Free graded monad generated by algebraic operations --
---------------------------------------------------------

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.TSets
open import Semantics.Modality.Future
open import Semantics.Modality.Past
open import Semantics.Monad.Core
open import Semantics.Monad.Strength

open import Util.Equality
open import Util.Operations
open import Util.Time

module Semantics.Monad.Strength.Naturality where

-- The strength of the monad generated by the operations in Op (continued)
-------------------------------------------------------------------------
            
-- Naturality

strˢ-nat : ∀ {A A' B B' τ τ' t}
         → (f : A →ᵗ A')
         → (g : B →ᵗ B')
         → (v : carrier ([ τ ]ᵒ (⟨ τ' ⟩ᵒ A)) t)
         → (c : Tˢ B τ t)
         → map-carrier (strᵀ {A'} {B'} ∘ᵗ mapˣᵗ ([ τ ]ᶠ (⟨ τ' ⟩ᶠ f)) (Tᶠ g)) (pack-×ᵗ (v , c))
         ≡ map-carrier (Tᶠ (mapˣᵗ (⟨ τ' ⟩ᶠ f) g) ∘ᵗ strᵀ {A} {B}) (pack-×ᵗ (v , c))
strˢ-nat {A} {A'} {B} {B'} {_} {τ'} {t} f g v (leaf w) =
  trans
    (∘ᵗ-reveal (strᵀ {A'} {B'}) (mapˣᵗ ([ 0 ]ᶠ (⟨ τ' ⟩ᶠ f)) (Tᶠ g)) (pack-×ᵗ (v , leaf w)))
    (trans
      (trans
        (trans
          (cong (map-carrier strᵀ)
            (⟨⟩ᵗ-reveal _ _ (pack-×ᵗ (v , leaf w))) )
          (trans
            (cong₂ strˢ
              (cong proj₁ (pack-unpack-×ᵗ _))
              (cong proj₂ (pack-unpack-×ᵗ _)))
            (trans
              (cong₂ strˢ
                (∘ᵗ-reveal _ _ (pack-×ᵗ (v , leaf w)))
                (∘ᵗ-reveal _ _ (pack-×ᵗ (v , leaf w))))
              (trans
                (cong₂ strˢ
                  (cong (map-carrier ([ 0 ]ᶠ (⟨ τ' ⟩ᶠ f))) (fstᵗ-reveal _))
                  (cong (Tˢᶠ g) (sndᵗ-reveal _)))
                (trans
                  (cong₂ strˢ
                    (cong (λ xy → map-carrier ([ 0 ]ᶠ (⟨ τ' ⟩ᶠ f)) (proj₁ xy))
                      (pack-unpack-×ᵗ (v , leaf w)))
                    (cong (λ xy → Tˢᶠ g (proj₂ xy)) (pack-unpack-×ᵗ (v , leaf w))))
                  (cong leaf
                    (trans
                      (cong pack-×ᵗ
                        (cong₂ _,_
                          (trans
                            (trans
                              (trans
                                (trans
                                  (cong₂ _,_
                                    (≤-irrelevant _ _)
                                    (trans
                                      (cong (monotone A' (≤-reflexive (cong (_∸ τ') (+-identityʳ t))))
                                        (trans
                                          (cong proj₂ ([]-reveal 0 (⟨ τ' ⟩ᶠ f) v))
                                          (cong proj₂ (⟨⟩-reveal τ' f v))))
                                      (sym (map-nat f _ _))))
                                  (sym
                                    (⟨⟩-reveal _ _ _)))
                                (sym
                                  (cong (λ xy → map-carrier (⟨ τ' ⟩ᶠ f) (proj₁ xy))
                                    (pack-unpack-×ᵗ _))))
                              (sym
                                (cong (map-carrier (⟨ τ' ⟩ᶠ f))
                                  (fstᵗ-reveal _))))
                            (sym (∘ᵗ-reveal _ _ _)))
                          (trans
                            (cong (map-carrier g)
                              (trans
                                (cong proj₂ (sym (pack-unpack-×ᵗ _)))
                                (sym (sndᵗ-reveal _))))
                            (sym (∘ᵗ-reveal _ _ _)))))
                      (sym
                        (⟨⟩ᵗ-reveal _ _ _)))))))))
        (sym
          (cong (Tˢᶠ ⟨ ⟨ τ' ⟩ᶠ f ∘ᵗ fstᵗ , g ∘ᵗ sndᵗ ⟩ᵗ)
            (cong₂ (strˢ {A} {B})
              (cong proj₁ (pack-unpack-×ᵗ (v , leaf w)))
              (cong proj₂ (pack-unpack-×ᵗ (v , leaf w)))))))
      (sym (∘ᵗ-reveal (Tᶠ (mapˣᵗ (⟨ τ' ⟩ᶠ f) g)) (strᵀ {A} {B}) (pack-×ᵗ (v , leaf w)))))
strˢ-nat {A} {A'} {B} {B'} {_} {τ'} {t} f g v (node {τ = τ} op w k k-nat) =
  trans
    (∘ᵗ-reveal _ _ _)
    (trans
      (trans
        (trans
          (cong₂ strˢ
            (cong (λ xy → proj₁ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _))
            (cong (λ xy → proj₂ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _)))
          (trans
            (cong₂ strˢ
              (cong proj₁ (pack-unpack-×ᵗ _))
              (cong proj₂ (pack-unpack-×ᵗ _)))
            (trans
              (cong₂ strˢ
                (∘ᵗ-reveal _ _ _)
                (∘ᵗ-reveal _ _ _))
              (trans
                (cong₂ strˢ
                  ([]-reveal (op-time op + τ) (⟨ τ' ⟩ᶠ f) _)
                  (cong (Tˢᶠ g) (sndᵗ-reveal _)))
                (cong₂ strˢ
                    (⟨⟩-reveal τ' f _)
                    (cong (λ xy → Tˢᶠ g (proj₂ xy)) (pack-unpack-×ᵗ _)))))))
        (sym
          (trans
            (cong (Tˢᶠ ⟨ ⟨ τ' ⟩ᶠ f ∘ᵗ fstᵗ , g ∘ᵗ sndᵗ ⟩ᵗ)
              (cong₂ strˢ
                (cong proj₁ (pack-unpack-×ᵗ _))
                (cong proj₂ (pack-unpack-×ᵗ _))))
            (dcong₂ (node op w)
              (ifun-ext (fun-ext (λ p → fun-ext (λ y →
                trans
                  (sym
                    (trans
                      (∘ᵗ-reveal _ _ _)
                      (cong (Tˢᶠ ⟨ ⟨ τ' ⟩ᶠ f ∘ᵗ fstᵗ , g ∘ᵗ sndᵗ ⟩ᵗ)
                        (cong₂ strˢ
                          (trans
                            (cong proj₁ (pack-unpack-×ᵗ _))
                            (cong₂ _,_
                              (≤-irrelevant _ _)
                              (cong (λ p → monotone A p (proj₂ v))
                                (≤-irrelevant _ _))))
                          (cong proj₂ (pack-unpack-×ᵗ _))))))
                  (trans
                    (sym
                      (strˢ-nat f g
                        (≤-trans
                          (proj₁ v)
                          (≤-trans
                            (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                            (+-monoˡ-≤ τ p)) ,
                         monotone A
                           (≤-trans
                             (≤-reflexive
                               (cong (_∸ τ') (sym (+-assoc t (op-time op) τ))))
                             (∸-monoˡ-≤ τ' (+-monoˡ-≤ τ p)))
                           (proj₂ v))
                        (k p y)))
                    (trans
                      (∘ᵗ-reveal _ _ _)
                      (cong₂ strˢ
                        (trans
                          (cong (λ xy → proj₁ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _))
                          (trans
                            (cong proj₁ (pack-unpack-×ᵗ _))
                            (trans
                              (∘ᵗ-reveal _ _ _)
                              (trans
                                ([]-reveal τ (⟨ τ' ⟩ᶠ f) _)
                                (trans
                                  (⟨⟩-reveal τ' f _)
                                  (trans
                                    (trans
                                      (cong₂ _,_
                                        (trans
                                          (cong proj₁ (fstᵗ-reveal {[ τ ]ᵒ (⟨ τ' ⟩ᵒ A)} {Tᵒ B τ} _))
                                          (≤-irrelevant _ _))
                                        (cong (map-carrier f)
                                          (trans
                                            (cong proj₂ (fstᵗ-reveal {[ τ ]ᵒ (⟨ τ' ⟩ᵒ A)} {Tᵒ B τ} _))
                                            (trans
                                              (cong (λ xy → proj₂ (proj₁ xy)) (pack-unpack-×ᵗ {[ τ ]ᵒ (⟨ τ' ⟩ᵒ A)} {Tᵒ B τ} _))
                                              (cong (λ p → monotone A p (proj₂ v)) (≤-irrelevant _ _))))))
                                      (sym
                                        (⟨⟩-reveal τ' f _)))
                                    (trans
                                      (map-nat
                                        {A = ⟨ τ' ⟩ᵒ A} {B = ⟨ τ' ⟩ᵒ A'}
                                          (⟨ τ' ⟩ᶠ f)
                                          (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ))) (+-monoˡ-≤ τ p))
                                          v)
                                      (cong
                                        (monotone
                                          (⟨ τ' ⟩ᵒ A')
                                          (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ))) (+-monoˡ-≤ τ p)))
                                        (trans
                                          (⟨⟩-reveal _ _ _)
                                          (trans
                                            (cong₂ _,_
                                              (sym
                                                (cong proj₁
                                                  {proj₁ (unpack-×ᵗ {[ op-time op + τ ]ᵒ (⟨ τ' ⟩ᵒ A)} {_} {t} (pack-×ᵗ (v , node op w k k-nat)))}
                                                  {v}
                                                  (cong proj₁ (pack-unpack-×ᵗ {[ op-time op + τ ]ᵒ (⟨ τ' ⟩ᵒ A)} _))))
                                              (cong (map-carrier f)
                                                (sym
                                                  ((cong proj₂
                                                  {proj₁ (unpack-×ᵗ {[ op-time op + τ ]ᵒ (⟨ τ' ⟩ᵒ A)} {_} {t} (pack-×ᵗ (v , node op w k k-nat)))}
                                                  {v}
                                                  (cong proj₁ (pack-unpack-×ᵗ {[ op-time op + τ ]ᵒ (⟨ τ' ⟩ᵒ A)} _)))))))
                                            (sym
                                              (cong₂ _,_
                                                (cong proj₁ (fstᵗ-reveal {[ op-time op + τ ]ᵒ (⟨ τ' ⟩ᵒ A)} _))
                                                (cong (map-carrier f)
                                                  (cong proj₂ (fstᵗ-reveal {[ op-time op + τ ]ᵒ (⟨ τ' ⟩ᵒ A)} _)))))))))))))))
                        (trans
                          (cong (λ xy → proj₂ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _))
                          (trans
                            (cong proj₂ (pack-unpack-×ᵗ _))
                            (trans
                              (∘ᵗ-reveal _ _ _)
                              (cong (Tˢᶠ g)
                                (trans
                                  (sndᵗ-reveal _)
                                  (cong proj₂ (pack-unpack-×ᵗ _))))))))))))))
              (ifun-ext (ifun-ext (fun-ext (λ p → fun-ext (λ q → fun-ext (λ y → uip))))))))))
      (sym
        (∘ᵗ-reveal _ _ _)))
strˢ-nat {A} {A'} {B} {B'} {_} {τ'} {t} f g v (delay {τ' = τ''} τ k) =
  trans
    (∘ᵗ-reveal _ _ _)
    (trans
      (trans
        (trans
          (cong₂ strˢ
            (cong (λ xy → proj₁ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _))
            (cong (λ xy → proj₂ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _)))
          (trans
            (cong₂ strˢ
              (cong proj₁ (pack-unpack-×ᵗ _))
              (cong proj₂ (pack-unpack-×ᵗ _)))
            (trans
              (cong₂ strˢ
                (∘ᵗ-reveal _ _ _)
                (∘ᵗ-reveal _ _ _))
              (trans
                (cong₂ strˢ
                  ([]-reveal _ _ _)
                  (cong (Tˢᶠ g) (sndᵗ-reveal _)))
                (cong₂ strˢ
                  (⟨⟩-reveal _ _ _)
                  (cong (λ xy → Tˢᶠ g (proj₂ xy)) (pack-unpack-×ᵗ _)))))))
        (sym
          (trans
            (cong (Tˢᶠ ⟨ ⟨ τ' ⟩ᶠ f ∘ᵗ fstᵗ , g ∘ᵗ sndᵗ ⟩ᵗ)
              (cong₂ strˢ
                (cong proj₁ (pack-unpack-×ᵗ _))
                (cong proj₂ (pack-unpack-×ᵗ _))))
            (cong (delay τ)
              (trans
                (trans
                  (trans
                    (cong (Tˢᶠ ⟨ ⟨ τ' ⟩ᶠ f ∘ᵗ fstᵗ , g ∘ᵗ sndᵗ ⟩ᵗ)
                      (cong₂ strˢ
                        (trans
                          (cong (≤-trans (proj₁ v) (≤-reflexive (sym (+-assoc t τ τ''))) ,_)
                            (cong (λ p → monotone A p (proj₂ v)) (≤-irrelevant _ _)))
                          (sym (cong proj₁ (pack-unpack-×ᵗ _))))
                        (sym
                          (cong proj₂ (pack-unpack-×ᵗ _)))))
                    (sym
                      (∘ᵗ-reveal _ _ _)))
                  (sym
                    (strˢ-nat {A} {A'} {B} {B'} f g
                      (≤-trans (proj₁ v) (≤-reflexive (sym (+-assoc t τ τ''))) ,
                       monotone A (≤-reflexive (cong (_∸ τ') (sym (+-assoc t τ τ'')))) (proj₂ v))
                      k)))
                (trans
                  (∘ᵗ-reveal _ _ _)
                  (cong₂ strˢ
                    (trans
                      (cong (λ xy → proj₁ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _))
                      (trans
                        (cong proj₁ (pack-unpack-×ᵗ _))
                        (trans
                          (∘ᵗ-reveal _ _ _)
                          (trans
                            ([]-reveal _ _ _)
                            (trans
                              (⟨⟩-reveal _ _ _)
                              (cong₂ _,_
                                (≤-irrelevant _ _)
                                (trans
                                  (cong (map-carrier f)
                                    (trans
                                      (cong proj₂
                                        (fstᵗ-reveal {[ τ'' ]ᵒ (⟨ τ' ⟩ᵒ A)} {Tᵒ B τ''} _))
                                      (trans
                                        (cong (λ xy → proj₂ (proj₁ xy))
                                          (pack-unpack-×ᵗ {[ τ'' ]ᵒ (⟨ τ' ⟩ᵒ A)} {Tᵒ B τ''} _))
                                        (trans
                                          (trans
                                            (cong (λ p → monotone A p (proj₂ v)) (≤-irrelevant _ _))
                                            (cong (monotone A (∸-mono (≤-reflexive (sym (+-assoc t τ τ''))) ≤-refl))
                                              (sym
                                                (cong (λ xy → proj₂ (proj₁ xy)) (pack-unpack-×ᵗ {[ τ + τ'' ]ᵒ (⟨ τ' ⟩ᵒ A)} _)))))
                                          (cong (monotone A (∸-mono (≤-reflexive (sym (+-assoc t τ τ''))) ≤-refl))
                                            (sym
                                              (cong proj₂
                                              (fstᵗ-reveal
                                                {[ τ + τ'' ]ᵒ (⟨ τ' ⟩ᵒ A)}
                                                (pack-×ᵗ (v , delay τ k))))))))))
                                  (map-nat f _ _))))))))
                    (trans
                      (cong (λ xy → proj₂ (unpack-×ᵗ xy)) (⟨⟩ᵗ-reveal _ _ _))
                      (trans
                        (cong proj₂ (pack-unpack-×ᵗ _))
                        (trans
                          (∘ᵗ-reveal _ _ _)
                          (trans
                            (cong (map-carrier (Tᶠ g)) (sndᵗ-reveal _))
                            (cong (λ xy → map-carrier (Tᶠ g) (proj₂ xy)) (pack-unpack-×ᵗ _)))))))))))))
      (sym
        (∘ᵗ-reveal _ _ _)))

strᵀ-nat : ∀ {A A' B B' τ τ'}
          → (f : A →ᵗ A')
          → (g : B →ᵗ B')
          →  strᵀ {A'} {B'} ∘ᵗ mapˣᵗ ([ τ ]ᶠ (⟨ τ' ⟩ᶠ f)) (Tᶠ g)
          ≡ᵗ Tᶠ (mapˣᵗ (⟨ τ' ⟩ᶠ f) g) ∘ᵗ strᵀ {A} {B}
strᵀ-nat {A} {A'} {B} {B'} {τ} {τ'} f g =
  eqᵗ (λ vc →
    trans
      (cong (map-carrier (strᵀ ∘ᵗ mapˣᵗ ([ τ ]ᶠ (⟨ τ' ⟩ᶠ f)) (Tᶠ g)))
        (sym (unpack-pack-×ᵗ vc)))
      (trans
        (strˢ-nat f g (proj₁ (unpack-×ᵗ vc)) (proj₂ (unpack-×ᵗ vc)))
        (cong (map-carrier (Tᶠ (mapˣᵗ (⟨ τ' ⟩ᶠ f) g) ∘ᵗ strᵀ {A} {B}))
          (unpack-pack-×ᵗ vc))))
