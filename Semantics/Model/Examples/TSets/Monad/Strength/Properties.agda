---------------------------------------------------------
-- Free graded monad generated by algebraic operations --
---------------------------------------------------------

module Semantics.Model.Examples.TSets.Monad.Strength.Properties where

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.Model.Examples.TSets.TSets
open import Semantics.Model.Examples.TSets.Modality.Future
open import Semantics.Model.Examples.TSets.Modality.Past
open import Semantics.Model.Examples.TSets.Modality.Adjunction
open import Semantics.Model.Examples.TSets.Monad.Core
open import Semantics.Model.Examples.TSets.Monad.Strength
open import Semantics.Model.Examples.TSets.Monad.Effects

open import Semantics.Model.Category.Derived TSetCat
open import Semantics.Model.Modality.Adjunction.Derived TSetCat TSetFut TSetPas TSetAdj

open import Util.Equality
open import Util.Operations
open import Util.Time
{-
-- Strength's interaction with ηᵀ

strᵀ-ηᵀ : ∀ {A B}
        → strᵀ ∘ᵗ mapˣᵗ ε⁻¹ ηᵀ
       ≡ᵗ ηᵀ {A ×ᵗ B}

strᵀ-ηᵀ {A} {B} =
  eqᵗ λ { {t} (x , y) →
    cong leaf
      (cong (_, y)
        (trans
          (monotone-trans A _ _ _)
          (trans
            (cong (λ p → monotone A p x) (≤-irrelevant _ _))
            (monotone-refl A x)))) }

-- Strength's interaction with μᵀ

strˢ-μˢ : ∀ {A B τ τ' t}
        → (x : carrier A (t + τ + τ'))
        → (c : Tˢ (Tᵒ B τ') τ t)
        → μˢ (Tˢᶠ strᵀ (strˢ x c))
        ≡ strˢ {A} {B} (monotone A (≤-reflexive (+-assoc t τ τ')) x) (μˢ c)

strˢ-μˢ {A} {B} {_} {τ'} {t} v (leaf w) =
  cong (λ p → strˢ p w) (cong (λ p → monotone A p v) (≤-irrelevant _ _))
strˢ-μˢ {A} {B} {_} {τ'} {t} v (op-node {τ = τ} op w k k-nat) =
  strˢ-μˢ-aux (sym (+-assoc (op-time op) τ τ')) _

  where

    strˢ-μˢ-aux : ∀ {τ'''}
                → (p : op-time op + (τ + τ') ≡ τ''')
                → (q : t + (op-time op + τ) + τ' ≡ t + τ''')
                → τ-substˢ p
                    (op-node op w
                     (λ p y →
                        μˢ
                        (Tˢᶠ strᵀ
                         (strˢ
                          (monotone ([ τ' ]ᵒ A)
                           (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                            (+-monoˡ-≤ τ p))
                           v)
                          (k p y))))
                     (λ p q y →
                        trans
                        (cong μˢ
                         (trans
                          (cong (Tˢᶠ strᵀ)
                           (trans
                            (cong₂ strˢ
                             (trans
                              (cong (λ p₁ → monotone ([ τ' ]ᵒ A) p₁ v)
                               (≤-irrelevant
                                (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                                 (+-monoˡ-≤ τ (≤-trans q p)))
                                (≤-trans
                                 (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                                  (+-monoˡ-≤ τ q))
                                 (+-mono-≤ p ≤-refl))))
                              (sym
                               (trans
                                (monotone-trans A
                                 (+-mono-≤
                                  (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                                   (+-monoˡ-≤ τ q))
                                  ≤-refl)
                                 (+-mono-≤ (+-mono-≤ p ≤-refl) ≤-refl) v)
                                (cong (λ r → monotone A r v)
                                 (≤-irrelevant
                                  (≤-trans
                                   (+-mono-≤
                                    (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                                     (+-monoˡ-≤ τ q))
                                    ≤-refl)
                                   (+-mono-≤ (+-mono-≤ p ≤-refl) ≤-refl))
                                  (+-mono-≤
                                   (≤-trans
                                    (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                                     (+-monoˡ-≤ τ q))
                                    (+-mono-≤ p ≤-refl))
                                   ≤-refl))))))
                             (k-nat p q y))
                            (strˢ-≤t-nat p
                             (monotone ([ τ' ]ᵒ A)
                              (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                               (+-monoˡ-≤ τ q))
                              v)
                             (k q y))))
                          (Tˢᶠ-≤t-nat strᵀ p
                           (strˢ
                            (monotone ([ τ' ]ᵒ A)
                             (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                              (+-monoˡ-≤ τ q))
                             v)
                            (k q y)))))
                        (μˢ-≤t-nat p
                         (Tˢᶠ strᵀ
                          (strˢ
                           (monotone ([ τ' ]ᵒ A)
                            (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                             (+-monoˡ-≤ τ q))
                            v)
                           (k q y))))))
                ≡
                  strˢ {A} (monotone A (≤-reflexive q) v)
                    (τ-substˢ p
                     (op-node op w (λ p y → μˢ (k p y))
                      (λ p q y → trans (cong μˢ (k-nat p q y)) (μˢ-≤t-nat p (k q y)))))
    strˢ-μˢ-aux refl q =
      dcong₂ (op-node op w)
        (ifun-ext (fun-ext (λ r → fun-ext (λ y → 
          (trans
            (strˢ-μˢ
              (monotone ([ τ' ]ᵒ A)
                 (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ)))
                  (+-monoˡ-≤ τ r))
                 v)
              (k r y))
            (cong (λ x → strˢ x (μˢ (k r y)))
              (trans
                (monotone-trans A _ _ _)
                (sym
                  (trans
                    (monotone-trans A _ _ _)
                    (cong (λ p → monotone A p v) (≤-irrelevant _ _)))))))))))
        (ifun-ext (ifun-ext (fun-ext (λ p → fun-ext (λ q → fun-ext (λ y → uip))))))


strˢ-μˢ {A} {B} {_} {τ''} {t} v (delay-node {τ' = τ'} τ k) =
  trans
    (cong (τ-substˢ (sym (+-assoc τ τ' τ''))) (cong (delay-node τ)
      (strˢ-μˢ (monotone ([ τ'' ]ᵒ A) (≤-reflexive (sym (+-assoc t τ τ'))) v) k)))
    (trans
      (strˢ-μˢ-aux (sym (+-assoc τ τ' τ'')) _ _)
      (cong (λ x → strˢ x (τ-substˢ (sym (+-assoc τ τ' τ'')) (delay-node τ (μˢ k))))
        (cong (λ p → monotone A p v) (≤-irrelevant _ _))))

    where

      strˢ-μˢ-aux : ∀ {τ''' τ''''}
                  → (p : τ + (τ' + τ'') ≡ τ''')
                  → (q : τ'''' + τ'' ≡ t + τ + (τ' + τ''))
                  → (r : t + (τ + τ') ≡ τ'''')
                  → τ-substˢ p
                      (delay-node τ
                       (strˢ {A}
                        (monotone A (≤-reflexive q)
                         (monotone ([ τ'' ]ᵒ A) (≤-reflexive r) v))
                        (μˢ k)))
                  ≡ strˢ
                      (monotone A (≤-reflexive (trans (trans (+-assoc t (τ + τ') τ'')
                                     (cong (t +_) (+-assoc τ τ' τ''))) (cong (t +_) p))) v)
                      (τ-substˢ p (delay-node τ (μˢ k)))
                      
      strˢ-μˢ-aux refl q r =
        cong (delay-node τ)
          (cong (λ x → strˢ x (μˢ k))
            (trans
              (monotone-trans A _ _ _) (sym
                (trans
                  (monotone-trans A _ _ _)
                  (cong (λ p → monotone A p v) (≤-irrelevant _ _))))))

strᵀ-μᵀ : ∀ {A B τ τ'}
        → μᵀ {A ×ᵗ B} {τ} {τ'} ∘ᵗ Tᶠ strᵀ ∘ᵗ strᵀ
       ≡ᵗ strᵀ ∘ᵗ mapˣᵗ (δ⁻¹ {A}) μᵀ

strᵀ-μᵀ {A} {B} {τ} {τ'} =
  eqᵗ (λ { {t} (x , c) → strˢ-μˢ x c })

-- Strength's interaction with the Cartesian-monoidal structure

strˢ-sndᵗ : ∀ {A B τ t}
          → (v : carrier A (t + τ))
          → (c : Tˢ B τ t)
          → Tˢᶠ sndᵗ (strˢ {A} v c)
          ≡ c
          
strˢ-sndᵗ v (leaf w) =
  refl
strˢ-sndᵗ {A} {_} {_} {t} v (op-node {τ = τ} op w k k-nat) =
  dcong₂ (op-node op w)
    (ifun-ext (fun-ext (λ p → fun-ext (λ y →
      strˢ-sndᵗ
        (monotone A (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ))) (+-monoˡ-≤ τ p)) v)
        (k p y)))))
    (ifun-ext (ifun-ext (fun-ext (λ p → fun-ext λ q → fun-ext λ y → uip))))
strˢ-sndᵗ {A} {_} {τ''} {t} v (delay-node {τ' = τ'} τ k) =
  cong (delay-node τ) (strˢ-sndᵗ (monotone A (≤-reflexive (sym (+-assoc t τ τ'))) v) k)

strᵀ-sndᵗ : ∀ {A B τ}
          → Tᶠ sndᵗ ∘ᵗ strᵀ {A} {B} {τ}
         ≡ᵗ sndᵗ

strᵀ-sndᵗ {A} {B} {τ} =
  eqᵗ (λ { {t} (x , c) → strˢ-sndᵗ x c })
-}
-- Strength's interaction with the Cartesian-monoidal structure

strˢ-assoc : ∀ {A B C τ t}
           → (x : carrier A (t + τ))
           → (y : carrier B (t + τ))
           → (c : Tˢ C τ t)
           → map-carrier
               (Tᶠ ×ᵐ-assoc ∘ᵗ strᵀ {A ×ᵗ B} ∘ᵗ mapˣᵗ ([]-monoidal {A} {B}) idᵗ ∘ᵗ ×ᵐ-assoc⁻¹)
               {t}
               (x , y , c)
           ≡ map-carrier (strᵀ ∘ᵗ mapˣᵗ idᵗ strᵀ) {t} (x , y , c)

strˢ-assoc {A} {B} {C} x y (leaf v) =
  cong leaf
    (cong₂ _,_
      (trans
        (monotone-trans A _ _ _)
        (trans
          (monotone-trans A _ _ _)
          (cong (λ p → monotone A p x) (≤-irrelevant _ _))))
      (cong₂ _,_
        (trans
          (monotone-trans B _ _ _)
          (trans
            (monotone-trans B _ _ _)
            (cong (λ p → monotone B p y) (≤-irrelevant _ _))))
        refl))
strˢ-assoc {A} {B} {C} {_} {t} x y (op-node {τ = τ} op v k k-nat) =
  dcong₂ (op-node op v)
    (ifun-ext (fun-ext (λ p → fun-ext (λ z →
      trans
        (cong (Tˢᶠ (tset-map (λ x₂ → proj₁ (proj₁ x₂) , proj₂ (proj₁ x₂) , proj₂ x₂) (λ p₁ x₂ → refl)))
          (cong (λ xy → strˢ xy (k p z))
            (cong₂ _,_
              (trans
                (monotone-trans A _ _ _)
                (trans
                  (monotone-trans A _ _ _)
                  (sym
                    (trans
                      (monotone-trans A _ _ _)
                      (trans
                        (monotone-trans A _ _ _)
                        (cong (λ p → monotone A p x) (≤-irrelevant _ _)))))))
              (trans
                (monotone-trans B _ _ _)
                (trans
                  (monotone-trans B _ _ _)
                  (sym
                    (trans
                      (monotone-trans B _ _ _)
                      (trans
                        (monotone-trans B _ _ _)
                        (cong (λ p → monotone B p y) (≤-irrelevant _ _))))))))))
        (strˢ-assoc
          (monotone A (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ))) (+-monoˡ-≤ τ p)) x)
          (monotone B (≤-trans (≤-reflexive (sym (+-assoc t (op-time op) τ))) (+-monoˡ-≤ τ p)) y)
          (k p z))))))
    {!ifun-ext (ifun-ext (fun-ext (λ p → (fun-ext (λ q → fun-ext (λ z →
      ?))))))!}
strˢ-assoc {A} {B} {C} {_} {t} x y (delay-node {τ' = τ'} τ k) =
  cong (delay-node τ)
    (trans
      (cong (Tˢᶠ (tset-map (λ x₁ → proj₁ (proj₁ x₁) , proj₂ (proj₁ x₁) , proj₂ x₁) (λ p x₁ → refl)))
        (cong (λ x → strˢ x k)
          (cong₂ _,_
            (trans
              (monotone-trans A _ _ _)
              (trans
                (monotone-trans A _ _ _)
                (sym
                  (trans
                    (monotone-trans A _ _ _)
                    (trans
                      (monotone-trans A _ _ _)
                      (cong (λ p → monotone A p x) (≤-irrelevant _ _)))))))
            (trans
              (monotone-trans B _ _ _)
              (trans
                (monotone-trans B _ _ _)
                (sym
                  (trans
                    (monotone-trans B _ _ _)
                    (trans
                      (monotone-trans B _ _ _)
                      (cong (λ p → monotone B p y) (≤-irrelevant _ _))))))))))
      (strˢ-assoc
        (monotone A (≤-reflexive (sym (+-assoc t τ τ'))) x)
        (monotone B (≤-reflexive (sym (+-assoc t τ τ'))) y) k) )

strᵀ-assoc : ∀ {A B C τ}
           →    Tᶠ ×ᵐ-assoc
             ∘ᵗ strᵀ {A ×ᵗ B} {C}
             ∘ᵗ mapˣᵗ ([]-monoidal {A} {B}) idᵗ ∘ᵗ ×ᵐ-assoc⁻¹
          ≡ᵗ    strᵀ {A}
             ∘ᵗ mapˣᵗ idᵗ (strᵀ {B} {C} {τ})

strᵀ-assoc {A} {B} {C} {τ} =
  eqᵗ (λ { {t} (x , y , c) → strˢ-assoc x y c })
