{-# OPTIONS --experimental-lossy-unification #-}

---------------------------------------------------------
-- Free graded monad generated by algebraic operations --
---------------------------------------------------------

module Semantics.Model.Examples.TSets.Monad.Handling.Properties.Delay where

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.Model.Examples.TSets.TSets
open import Semantics.Model.Examples.TSets.Modality.Future
open import Semantics.Model.Examples.TSets.Modality.Past
open import Semantics.Model.Examples.TSets.Modality.Adjunction
open import Semantics.Model.Examples.TSets.Monad.Core
open import Semantics.Model.Examples.TSets.Monad.Effects
open import Semantics.Model.Examples.TSets.Monad.Handling

open import Semantics.Model.Category.Derived TSetCat renaming (map⇒ᵐ to map⇒ᵗ)
open import Semantics.Model.Modality.Adjunction.Derived TSetCat TSetFut TSetPas TSetAdj

open import Util.Equality
open import Util.Operations
open import Util.Time

-- T-alg-of-handlerᵀ's interaction with the delay operation

T-alg-of-handlerᵀ-delayᵀ : ∀ {A τ τ' τ''}
                         →    uncurryᵗ T-alg-of-handlerᵀ
                           ∘ᵗ mapˣᵗ idᵗ (delayᵀ {Tᵒ A τ''} τ {τ'})
                        ≡ᵗ    τ-substᵀ (sym (+-assoc τ τ' τ''))
                           ∘ᵗ delayᵀ τ
                           ∘ᵗ [ τ ]ᶠ (uncurryᵗ (T-alg-of-handlerᵀ {τ = τ'} {τ' = τ''}))
                           ∘ᵗ [ τ ]ᶠ (mapˣᵗ
                                       {⟨ τ ⟩ᵒ (Πᵗ Op
                                                 (λ op →
                                                    Πᵗ Time
                                                    (λ τ''' →
                                                       ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                                       Tᵒ A (op-time op + τ'''))))}
                                       {Tᵒ (Tᵒ A τ'') τ'}
                                       {Πᵗ Op
                                         (λ op →
                                            Πᵗ Time
                                            (λ τ''' →
                                               ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                               Tᵒ A (op-time op + τ''')))}
                                       ε-⟨⟩ idᵗ)
                           ∘ᵗ []-monoidal
                                {⟨ τ ⟩ᵒ (Πᵗ Op
                                   (λ op →
                                      Πᵗ Time
                                      (λ τ''' →
                                         ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                         Tᵒ A (op-time op + τ'''))))}
                                {Tᵒ (Tᵒ A τ'') τ'}
                           ∘ᵗ mapˣᵗ
                                {Πᵗ Op
                                   (λ op →
                                      Πᵗ Time
                                      (λ τ''' →
                                         ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                         Tᵒ A (op-time op + τ''')))}
                                {[ τ ]ᵒ (Tᵒ (Tᵒ A τ'') τ')}
                                {[ τ ]ᵒ (⟨ τ ⟩ᵒ (Πᵗ Op
                                   (λ op →
                                      Πᵗ Time
                                      (λ τ''' →
                                         ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                         Tᵒ A (op-time op + τ''')))))}
                                {[ τ ]ᵒ (Tᵒ (Tᵒ A τ'') τ')}
                                η⊣ idᵗ

T-alg-of-handlerᵀ-delayᵀ {A} {τ} {τ'} {τ''} =
  eqᵗ (λ { {t} (h , c) →
    cong (τ-substˢ (sym (+-assoc τ τ' τ'')))
      (cong (delay-node τ) (
        begin
          T-alg-of-handlerˢ h (≤-stepsʳ τ ≤-refl) c
        ≡⟨ cong (λ p → T-alg-of-handlerˢ h p c) (≤-irrelevant _ _) ⟩
          T-alg-of-handlerˢ h (≤-trans (≤-stepsʳ τ ≤-refl) ≤-refl) c
        ≡⟨ sym (T-alg-of-handlerˢ-≤t-nat (≤-stepsʳ τ ≤-refl) h ≤-refl c) ⟩
          T-alg-of-handlerˢ
            (monotone (Πᵗ Op (λ op → Πᵗ Time (λ τ'' →
                                           ⟦ param op ⟧ᵍ ×ᵗ ([ op-time op ]ᵒ (⟦ arity op ⟧ᵍ
                                             ⇒ᵗ (Tᵒ A τ''))) ⇒ᵗ Tᵒ A (op-time op + τ'')))) (≤-stepsʳ τ ≤-refl) h)
            ≤-refl
            c
        ≡⟨ cong (λ h → T-alg-of-handlerˢ h ≤-refl c)
             (fun-ext (λ op → fun-ext (λ τ''' →
               dcong₂ tset-map
                 (ifun-ext (fun-ext (λ { (p , y , c) →
                   cong (map-carrier (h op τ'''))
                     (cong₂ _,_
                       (≤-irrelevant _ _)
                       (cong₂ _,_
                         refl
                         refl)) })))
                 (ifun-ext (ifun-ext (fun-ext (λ _ → fun-ext (λ _ → uip)))))))) ⟩
          T-alg-of-handlerˢ
            (proj₁ (map-carrier
             (   [ τ ]ᶠ (mapˣᵗ {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ'''))))}
                               {Tᵒ (Tᵒ A τ'') τ'}
                               {Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ''')))}
                               ε-⟨⟩
                               idᵗ)
              ∘ᵗ []-monoidal
                   {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                      ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                      Tᵒ A (op-time op + τ'''))))}
                   {Tᵒ (Tᵒ A τ'') τ'}
              ∘ᵗ mapˣᵗ η⊣ idᵗ)
             (h , c)))
            ≤-refl
            c
        ≡⟨ cong (λ z → T-alg-of-handlerˢ
            (proj₁ (map-carrier
             (   [ τ ]ᶠ (mapˣᵗ {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ'''))))}
                               {Tᵒ (Tᵒ A τ'') τ'}
                               {Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ''')))} ε-⟨⟩ idᵗ)
              ∘ᵗ []-monoidal
                   {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                      ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                      Tᵒ A (op-time op + τ'''))))}
                   {Tᵒ (Tᵒ A τ'') τ'}
              ∘ᵗ mapˣᵗ η⊣ idᵗ)
             (h , c)))
            ≤-refl z) (sym (trans (Tˢ-≤t-trans _ _ _) (trans (cong (λ p → Tˢ-≤t p c) (≤-irrelevant _ _)) (Tˢ-≤t-refl c)))) ⟩
          T-alg-of-handlerˢ
            (proj₁ (map-carrier
             (   [ τ ]ᶠ (mapˣᵗ {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ'''))))}
                               {Tᵒ (Tᵒ A τ'') τ'}
                               {Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ''')))} ε-⟨⟩ idᵗ)
              ∘ᵗ []-monoidal
                   {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                      ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                      Tᵒ A (op-time op + τ'''))))}
                   {Tᵒ (Tᵒ A τ'') τ'}
              ∘ᵗ mapˣᵗ η⊣ idᵗ)
             (h , c)))
            ≤-refl
            (proj₂ (map-carrier
             (   [ τ ]ᶠ (mapˣᵗ {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ'''))))}
                               {Tᵒ (Tᵒ A τ'') τ'}
                               {Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ''')))} ε-⟨⟩ idᵗ)
              ∘ᵗ []-monoidal
                   {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                      ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                      Tᵒ A (op-time op + τ'''))))}
                   {Tᵒ (Tᵒ A τ'') τ'}
              ∘ᵗ mapˣᵗ η⊣ idᵗ)
             (h , c)))
        ≡⟨ refl ⟩
          map-carrier
            ([ τ ]ᶠ (uncurryᵗ T-alg-of-handlerᵀ))
            (map-carrier
             (   [ τ ]ᶠ (mapˣᵗ {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ'''))))}
                               {Tᵒ (Tᵒ A τ'') τ'}
                               {Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                                 ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                 Tᵒ A (op-time op + τ''')))} ε-⟨⟩ idᵗ)
              ∘ᵗ []-monoidal
                   {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                      ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                      Tᵒ A (op-time op + τ'''))))}
                   {Tᵒ (Tᵒ A τ'') τ'}
              ∘ᵗ mapˣᵗ η⊣ idᵗ)
             (h , c))
        ≡⟨ refl ⟩
          map-carrier
          (   [ τ ]ᶠ (uncurryᵗ T-alg-of-handlerᵀ)
           ∘ᵗ [ τ ]ᶠ (mapˣᵗ ε-⟨⟩ idᵗ)
           ∘ᵗ []-monoidal
                {⟨ τ ⟩ᵒ (Πᵗ Op (λ op → Πᵗ Time (λ τ''' →
                   ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                   Tᵒ A (op-time op + τ'''))))}
                {Tᵒ (Tᵒ A τ'') τ'}
           ∘ᵗ mapˣᵗ η⊣ idᵗ)
          (h , c)
        ∎)) })
