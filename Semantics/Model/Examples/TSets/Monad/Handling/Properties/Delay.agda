---------------------------------------------------------
-- Free graded monad generated by algebraic operations --
---------------------------------------------------------

module Semantics.Model.Examples.TSets.Monad.Handling.Properties.Delay where

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.Model.Examples.TSets.TSets
open import Semantics.Model.Examples.TSets.Modality.Future
open import Semantics.Model.Examples.TSets.Modality.Past
open import Semantics.Model.Examples.TSets.Modality.Adjunction
open import Semantics.Model.Examples.TSets.Monad.Core
open import Semantics.Model.Examples.TSets.Monad.Effects
open import Semantics.Model.Examples.TSets.Monad.Handling

open import Semantics.Model.Category.Derived TSetCat renaming (map⇒ᵐ to map⇒ᵗ)
open import Semantics.Model.Modality.Adjunction.Derived TSetCat TSetFut TSetPas TSetAdj

open import Util.Equality
open import Util.Operations
open import Util.Time

-- T-alg-of-handlerᵀ's interaction with the delay operation

T-alg-of-handlerᵀ-delayᵀ : ∀ {A τ τ' τ''}
                         →    uncurryᵗ T-alg-of-handlerᵀ
                           ∘ᵗ mapˣᵗ idᵗ (delayᵀ {Tᵒ A τ''} τ {τ'})
                        ≡ᵗ    τ-substᵀ (sym (+-assoc τ τ' τ''))
                           ∘ᵗ delayᵀ τ
                           ∘ᵗ [ τ ]ᶠ (uncurryᵗ (T-alg-of-handlerᵀ {τ = τ'} {τ' = τ''}))
                           ∘ᵗ [ τ ]ᶠ (mapˣᵗ
                                       {⟨ τ ⟩ᵒ (Πᵗ Op
                                                 (λ op →
                                                    Πᵗ Time
                                                    (λ τ''' →
                                                       ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                                       Tᵒ A (op-time op + τ'''))))}
                                       {Tᵒ (Tᵒ A τ'') τ'}
                                       {Πᵗ Op
                                         (λ op →
                                            Πᵗ Time
                                            (λ τ''' →
                                               ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                               Tᵒ A (op-time op + τ''')))}
                                       ε-⟨⟩ idᵗ)
                           ∘ᵗ []-monoidal
                                {⟨ τ ⟩ᵒ (Πᵗ Op
                                   (λ op →
                                      Πᵗ Time
                                      (λ τ''' →
                                         ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                         Tᵒ A (op-time op + τ'''))))}
                                {Tᵒ (Tᵒ A τ'') τ'}
                           ∘ᵗ mapˣᵗ
                                {Πᵗ Op
                                   (λ op →
                                      Πᵗ Time
                                      (λ τ''' →
                                         ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                         Tᵒ A (op-time op + τ''')))}
                                {[ τ ]ᵒ (Tᵒ (Tᵒ A τ'') τ')}
                                {[ τ ]ᵒ (⟨ τ ⟩ᵒ (Πᵗ Op
                                   (λ op →
                                      Πᵗ Time
                                      (λ τ''' →
                                         ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ''') ⇒ᵗ
                                         Tᵒ A (op-time op + τ''')))))}
                                {[ τ ]ᵒ (Tᵒ (Tᵒ A τ'') τ')}
                                η⊣ idᵗ

T-alg-of-handlerᵀ-delayᵀ {A} {τ} {τ'} {τ''} =
  eqᵗ (λ { {t} (H , c) → {!!}})


{-
  eqᵗ (λ { {t} (H , c) →
    cong (τ-substˢ (sym (+-assoc τ τ' τ'')))
      (cong (delay-node τ)
        (dcong₃ (λ x y z → T-alg-of-handlerˢ {τ = τ'} {τ' = τ''} {t = t} x y z)
          {H}
          {(λ i i₁ →
         tset-map
         (λ x →
            map-carrier (H i i₁)
            (≤-trans
             _
             (≤-trans
              (∸-mono
               (+-mono-≤
                _
                (≤-reflexive refl))
               (≤-reflexive refl))
              (≤-trans
               (∸-mono
                (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                (≤-reflexive refl))
               (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x))))
             , proj₂ x))
         (λ p x →
            trans
            (cong
             (λ x₁ →
                map-carrier (H i i₁)
                (≤-trans
                 _
                 (≤-trans
                  (∸-mono
                   (+-mono-≤
                    _
                    (≤-reflexive refl))
                   (≤-reflexive refl))
                  (≤-trans
                   (∸-mono
                    (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                    (≤-reflexive refl))
                   (proj₁ x₁)))
                 , proj₂ x₁))
             (cong₂ _,_
              (≤-irrelevant
               (≤-trans (∸-mono (≤-reflexive refl) z≤n) (≤-trans (proj₁ x) p))
               (≤-trans (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x)) p))
              refl))
            (trans
             (cong
              (λ x₁ →
                 map-carrier (H i i₁)
                 (≤-trans
                  _
                  (≤-trans
                   (∸-mono
                    (+-mono-≤
                     _
                     (≤-reflexive refl))
                    (≤-reflexive refl))
                   (proj₁ x₁))
                  , proj₂ x₁))
              (cong₂ _,_
               (≤-irrelevant
                (≤-trans
                 (∸-mono
                  (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                  (≤-reflexive refl))
                 (≤-trans (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x)) p))
                (≤-trans
                 (≤-trans
                  (∸-mono
                   (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                   (≤-reflexive refl))
                  (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x)))
                 p))
               refl))
             (trans
              (cong
               (λ x₁ →
                  map-carrier (H i i₁)
                  (≤-trans
                   _
                   (proj₁ x₁)
                   , proj₂ x₁))
               (cong₂ _,_
                (≤-irrelevant
                 (≤-trans
                  (∸-mono
                   (+-mono-≤
                    _
                    (≤-reflexive refl))
                   (≤-reflexive refl))
                  (≤-trans
                   (≤-trans
                    (∸-mono
                     (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                     (≤-reflexive refl))
                    (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x)))
                   p))
                 (≤-trans
                  (≤-trans
                   (∸-mono
                    (+-mono-≤
                     _
                     (≤-reflexive refl))
                    (≤-reflexive refl))
                   (≤-trans
                    (∸-mono
                     (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                     (≤-reflexive refl))
                    (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x))))
                  p))
                refl))
              (trans
               (cong (map-carrier (H i i₁))
                (cong₂ _,_
                 (≤-irrelevant
                  (≤-trans
                   _
                   (≤-trans
                    (≤-trans
                     (∸-mono
                      (+-mono-≤
                       _
                       (≤-reflexive refl))
                      (≤-reflexive refl))
                     (≤-trans
                      (∸-mono
                       (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                       (≤-reflexive refl))
                      (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x))))
                    p))
                  (≤-trans
                   (≤-trans
                    _
                    (≤-trans
                     (∸-mono
                      (+-mono-≤
                       _
                       (≤-reflexive refl))
                      (≤-reflexive refl))
                     (≤-trans
                      (∸-mono
                       (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                       (≤-reflexive refl))
                      (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x)))))
                   p))
                 refl))
               (map-nat (H i i₁) p
                (≤-trans
                 _
                 (≤-trans
                  (∸-mono
                   (+-mono-≤
                    _
                    (≤-reflexive refl))
                   (≤-reflexive refl))
                  (≤-trans
                   (∸-mono
                    (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
                    (≤-reflexive refl))
                   (≤-trans (∸-mono (≤-reflexive refl) z≤n) (proj₁ x))))
                 , proj₂ x)))))))}
          {{!!}}
          {{!!}}
          {{!!}}
          {{!!}}
          (fun-ext (λ op → fun-ext (λ τ''' →
            dcong₂
              tset-map
                (ifun-ext (fun-ext (λ x → cong (map-carrier (H op τ''')) (cong₂ _,_ (≤-irrelevant _ _) refl))))
                (ifun-ext (ifun-ext (fun-ext (λ _ → fun-ext (λ _ → uip))))))))
          {!!}
          {!!})) })

-}

{-

(cong₂
          (T-alg-of-handlerˢ H)
          {subst (_≤_ t) (+-comm τ t) (≤-stepsˡ τ (≤-reflexive refl))}
          {m≤m+n t τ}
          {c}
          {(Tˢ-≤t
       (n≤m⇒m∸n+n≤m τ (t + τ) (subst (_≤_ τ) (+-comm τ t) (m≤m+n τ t)))
       (Tˢ-≤t
        (+-mono-≤
         (≤-reflexive
          (sym
           {!!}))
         (≤-reflexive refl))
        c))}
          {!!}
          {!!})
-}
