--------------------------------------------------------------------
-- [-]-strong free graded monad generated by algebraic operations --
--------------------------------------------------------------------

module Semantics.Model.Example.TSets.Monad.Effects where

open import Function

open import Data.Empty
open import Data.Product
open import Data.Unit hiding (_≤_)

open import Semantics.Model.Example.TSets.TSets
open import Semantics.Model.Example.TSets.Modality.Future
open import Semantics.Model.Example.TSets.Modality.Past
open import Semantics.Model.Example.TSets.Monad.Core

open import Util.Equality
open import Util.Operations
open import Util.Time

-- The (algebraic) operations of the graded monad generated by the operations in Op
-----------------------------------------------------------------------------------

-- Delay-node operation (T is a kind of a [_]-module)

delayᵀ : ∀ {A} (τ : Time) {τ'} → [ τ ]ᵒ (Tᵒ A τ') →ᵗ Tᵒ A (τ + τ')
delayᵀ τ =
  tset-map
    (delay-node τ)
    (λ p c → refl)


-- Algebraic operations

opᵀ : ∀ {A τ} → (op : Op)
    → ⟦ param op ⟧ᵍ ×ᵗ [ op-time op ]ᵒ (⟦ arity op ⟧ᵍ ⇒ᵗ Tᵒ A τ) →ᵗ Tᵒ A (op-time op + τ)
opᵀ {A} {τ} op =
  tset-map
    (λ {t} vk →
      op-node op
        (proj₁ vk)
        (λ p y →
          map-carrier (proj₂ vk) (p , y))
        (λ p q y →
          map-nat (proj₂ vk) _ (q , y)))
    (λ {t} {t'} p k →
      dcong₂ (op-node op (monotone ⟦ param op ⟧ᵍ p (proj₁ k)))
        (ifun-ext (fun-ext (λ p → fun-ext (λ y → refl))))
        (ifun-ext (ifun-ext (fun-ext (λ q → fun-ext (λ r → fun-ext (λ y → uip)))))))
